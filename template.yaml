Transform: AWS::Serverless-2016-10-31


Resources:
  CustomEmail:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CustomEmail'
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CustomEmail
      CodeUri: src
      Handler: epsagon.wrapper
      Runtime: python3.8
      MemorySize: !Ref 'EnvConfiglambdamemorysizeAsString'
      Timeout: !Ref 'EnvConfiglambdatimeoutAsString'
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*'
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub '/${EnvironmentTagName}/'
          EPSAGON_HANDLER: custom_email.custom_email
          EPSAGON_APP_NAME: '!Ref ${AWS::StackName}'
          EPSAGON_TOKEN: '!Ref EpsagontokenAsString'
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - custom_email
            EventBusName: !Ref 'EnvConfigeventbridgethiscoveryeventbusAsString'
          Metadata:
            StackeryName: CustomEmail
      Layers:
        - arn:aws:lambda:eu-west-1:066549572091:layer:epsagon-python-layer:325

  RecordUserLogin:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RecordUserLogin
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RecordUserLogin
      CodeUri: src
      Handler: user_login.record_user_login_event
      Runtime: python3.8
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref notifications
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TABLE_NAME: !Ref notifications
          TABLE_ARN: !GetAtt notifications.Arn
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Auth0 log
              detail:
                data:
                  type:
                    - s
            EventBusName: !Ref EnvConfigeventbridgeauth0eventbusAsString
          Metadata:
            StackeryName: RecordUserLogin

  RecordUserRegistration:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RecordUserRegistration
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RecordUserRegistration
      CodeUri: src
      Handler: user_registration.record_user_registration
      Runtime: python3.8
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref notifications
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TABLE_NAME: !Ref notifications
          TABLE_ARN: !GetAtt notifications.Arn
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Auth0 log
              detail:
                data:
                  type:
                    - ss
            EventBusName: !Ref EnvConfigeventbridgeauth0eventbusAsString
          Metadata:
            StackeryName: RecordUserRegistration

  notifications:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: processing_status
          AttributeType: S
        - AttributeName: created
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-notifications
      GlobalSecondaryIndexes:
        - IndexName: processing-status-index
          KeySchema:
            - AttributeName: processing_status
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
    Metadata:
      StackeryName: Notifications

  tokens:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-tokens
    Metadata:
      StackeryName: Tokens
  processnotifications:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-processnotifications
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: process-notifications
      CodeUri: src
      Handler: notification_process.process_notifications
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref notifications
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref tokens
      Events:
        Timer9:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
          Metadata:
            StackeryName: timer-process-notifications
      Environment:
        Variables:
          TABLE_NAME: !Ref notifications
          TABLE_ARN: !GetAtt notifications.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TABLE_NAME_2: !Ref tokens
          TABLE_ARN_2: !GetAtt tokens.Arn
    Metadata:
      StackeryName: process-notifications
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfiglambdamemorysizeAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/memory-size
  EnvConfiglambdatimeoutAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/timeout
  EnvConfigeventbridgethiscoveryeventbusAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/eventbridge/thiscovery-event-bus
  EpsagontokenAsString:
    Type: String
    Description: Epsagon token (GitHub secret injected by deployment script)
Metadata:
  EnvConfigParameters:
    EnvConfiglambdamemorysizeAsString: lambda.memory-size
    EnvConfiglambdatimeoutAsString: lambda.timeout
    EnvConfigeventbridgethiscoveryeventbusAsString: eventbridge.thiscovery-event-bus