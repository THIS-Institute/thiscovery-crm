name: Pipeline

on:
  push:
    branches:
      - 'master'
      - '4361-github-pipeline-exploration'
  pull_request:
    branches:
      - 'master'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EPSAGON_TOKEN: ${{ secrets.EPSAGON_TOKEN }}
  SAM_TEMPLATE: template.yaml
  TESTING_REGION: eu-west-1

  PROD_STACK_NAME: thiscovery-crm-staging
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::756495104356:role/aws-sam-cli-managed-staging-PipelineExecutionRole-1EVVZ8OZFP6UJ
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::756495104356:role/aws-sam-cli-managed-stagi-CloudFormationExecutionR-1GVTGH3ZBWKAM
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-staging-pipel-artifactsbucket-1tnfw8mstb50t
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
  # prod "sam package" and "sam deploy" commands.
  # PROD_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  PROD_REGION: eu-west-1
  PROD_ENV: staging

jobs:
  test:
    name: Deploy to testing env and run tests
    runs-on: ubuntu-latest
    steps:
      # Configure target test account based on pull request actor
      - if: ${{ github.actor == 'afs25' }}
        name: Sets env vars for afs25
        run: |
          echo "AWS_TEST_ACCOUNT=${{ secrets.AFS25_AWS_ACCOUNT }}" >> $GITHUB_ENV
          echo "AWS_TEST_ENV=test-afs25" >> $GITHUB_ENV

      - if: ${{ github.actor == 'sophiemachin' }}
        name: Sets env vars for sem86
        run: |
          echo "AWS_TEST_ACCOUNT=${{ secrets.SEM86_AWS_ACCOUNT }}" >> $GITHUB_ENV
          echo "AWS_TEST_ENV=test-sem86" >> $GITHUB_ENV

      - if: ${{ github.actor == 'this-andy' }}
        name: Sets env vars for amp205
        run: |
          echo "AWS_TEST_ACCOUNT=${{ secrets.AMP205_AWS_ACCOUNT }}" >> $GITHUB_ENV
          echo "AWS_TEST_ENV=test-amp205" >> $GITHUB_ENV

      - name: Set additional test env variables
        run: |
          echo "SECRETS_NAMESPACE=/${AWS_TEST_ENV}/" >> $GITHUB_ENV
          echo "UNIT_TEST_NAMESPACE=/${AWS_TEST_ENV}/" >> $GITHUB_ENV
          echo "TESTING_PIPELINE_EXECUTION_ROLE=arn:aws:iam::${AWS_TEST_ACCOUNT}:role/thiscovery-devops-${AWS_TEST_ENV}-${TESTING_REGION}-PipelineExec" >> $GITHUB_ENV

      # Todo: it would be nice to abort the workflow here if test environment could not be set (e.g. actor is unknown)
      - name: DEBUG STEP - check that test environment is set correctly
        run: |
          echo "Aws test account: ${AWS_TEST_ACCOUNT}"
          echo "Aws test env: ${AWS_TEST_ENV}"
          echo "Secrets namespace: ${SECRETS_NAMESPACE}"
          echo "Unit test namespace: ${UNIT_TEST_NAMESPACE}"
          echo "Testing pipeline execution role: ${TESTING_PIPELINE_EXECUTION_ROLE}"

      # Build and deploy to test environment
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v1

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Execute thiscovery deployment script
        run: |
          python .github/workflows/deploy.py
